// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  image         String?
  password      String?
  emailVerified DateTime?

  // NextAuth Relations
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional (WebAuthn)

  // Custom Fields
  imageUrl      String?
  industry      String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])

  bio           String?
  experience    Int?
  skills        String[]        // Array of skills

  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
  roadmaps      CareerRoadmap[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// === App-Specific Models ===

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float
  questions     Json[]
  category      String
  improvementTip String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model CareerRoadmap {
  id             String   @id @default(uuid())
  userId         String
  field          String
  timeCommitment String
  roadmapTitle   String
  description    String
  duration       String
  initialNodes   Json
  initialEdges   Json
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model IndustryInsight {
  id                String    @id @default(cuid())
  industry          String    @unique
  users             User[]
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       String
  topSkills         String[]
  marketOutlook     String
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime  @default(now())
  nextUpdate        DateTime

  @@index([industry])
}